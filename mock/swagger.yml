openapi: 3.0.0
info:
  description: Mock API for vue-typescript-admin-template.
  version: 1.0.0
  title: Mock API
  contact:
    email: armourcy@email.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: /api/v1
tags:
  - name: media
    description: Medias data related api.
  - name: roles
    description: Roles related api.
  - name: transactions
    description: Transactions data related api.
  - name: users
    description: Users related api.
paths:
  /media:
    get:
      tags:
        - media
      summary: Get Media List
      description: Return a list of media.
      operationId: getMedias
      parameters:
        - name: importance
          in: query
          description: Used to filter media by importance.
          schema:
            $ref: '#/components/schemas/Media/properties/importance'
        - name: title
          in: query
          description: Used to filter media by matched title substring.
          schema:
            $ref: '#/components/schemas/Media/properties/title'
        - name: type
          in: query
          description: Used to filter media by type.
          schema:
            $ref: '#/components/schemas/Media/properties/type'
        - name: page
          in: query
          description: The wanted page number (one page).
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: limit
          in: query
          description: The maximum number of media returned for one page.
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
        - name: sort
          in: query
          description: Optional sorting order for media.
          schema:
            type: string
            enum:
              - +id
              - -id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int32
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Media'
    post:
      tags:
        - media
      summary: Create New Media
      description: Create a new article.
      operationId: createMedia
      security:
        - AccessTokenAuth: []
      parameters:
        - name: article
          in: query
          required: true
          description: The data for new article.
          schema:
            $ref: '#/components/schemas/Media'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      article:
                        $ref: '#/components/schemas/Media'
        401:
          $ref: '#/components/responses/Unauthorized'
  /media/{guid}:
    get:
      tags:
        - media
      summary: Get Media Detail
      description: Get article detail by ID.
      operationId: getMedia
      security:
        - AccessTokenAuth: []
      parameters:
        - name: guid
          in: path
          required: true
          description: Media id.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      article:
                        $ref: '#/components/schemas/Media'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - media
      summary: Update Media Detail
      description: Update article deatail by ID.
      operationId: updateMedia
      security:
        - AccessTokenAuth: []
      parameters:
        - name: guid
          in: path
          required: true
          description: Media id.
          schema:
            type: integer
            format: int64
        - name: article
          in: query
          required: true
          description: data for the updated article.
          schema:
            $ref: '#/components/schemas/Media'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      article:
                        $ref: '#/components/schemas/Media'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - media
      summary: Delete Media
      description: Delete article by ID.
      operationId: deleteMedia
      security:
        - AccessTokenAuth: []
      parameters:
        - name: guid
          in: path
          required: true
          description: Media id.
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    post:
      tags:
        - users
      summary: Get current user info
      description: This can only be done by the logged in user.
      operationId: getUserInfo
      security:
        - AccessTokenAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'
components:
  securitySchemes:
    AccessTokenAuth:
      type: apiKey
      in: header
      name: X-Access-Token
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidUser:
      description: Invalid username supplied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    Media:
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          type: string
          enum:
            - draft
            - published
            - deleted
        title:
          type: string
          example: IG Won World Championship
        abstractContent:
          type: string
          example: Invictus Gaming sweeps Fnatic 3-0 to win League of Legends World Championship
        fullContent:
          type: string
          example: Media details goes here...
        sourceURL:
          type: string
          format: url
          example: http://www.espn.com/esports/story/_/id/25164094/invictus-gaming-sweeps-fnatic-3-0-win-league-legends-world-championship
        imageURL:
          type: string
          format: url
          example: https://a1.espncdn.com/combiner/i?img=%2Fphoto%2F2018%2F1103%2Fr458060_1296x729_16%2D9.jpg&w=920&h=518&scale=crop&cquality=80&location=origin&format=jpg
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        platforms:
          type: array
          items:
            type: string
            enum:
              - a-platform
              - b-platform
              - c-platform
          uniqueItems: true
        disableComment:
          type: boolean
          example: false
        importance:
          type: integer
          format: int32
          enum:
            - 1
            - 2
            - 3
        author:
          type: string
          example: Chong Guo
        reviewer:
          type: string
          example: Chong Guo
        type:
          type: string
          enum:
            - CN
            - US
            - JP
            - EU
        pageviews:
          $ref: '#/components/schemas/Pageviews/properties/pageviews'
      required:
        - id
        - status
        - title
        - timestamp
        - importance
        - author
    Pageviews:
      type: object
      properties:
        key:
          type: string
          enum:
            - PC
            - Mobile
            - iOS
            - Android
        pageviews:
          type: integer
          format: int32
          example: 1024
      required:
        - key
        - pageviews
    Transaction:
      type: object
      properties:
        orderId:
          type: string
          format: uuid
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        username:
          type: string
          example: Chong Guo
        price:
          type: number
          format: double
        status:
          type: string
          enum:
            - success
            - pending
      required:
        - orderId
        - timestamp
        - username
        - price
        - status
    Role:
      type: object
      properties:
        key:
          type: string
          example: admin
        name:
          type: string
          example: admin
        description:
          type: string
          example: Super Administrator. Have access to view all pages.
        routes:
          $ref: '#/components/schemas/AnyValue'
      required:
        - key
        - name
        - routes
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
          example: Armour
        password:
          type: string
          example: 12345678
        name:
          type: string
          example: Chong Guo
        email:
          type: string
          example: armourcy@gmail.com
        phone:
          type: string
          example: 18888888888
        avatar:
          type: string
          format: url
        introduction:
          type: string
          example: Always Sunshine
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role/properties/key'
      required:
        - id
        - username
        - password
        - roles
    Timestamp:
      oneOf:
        - type: integer
          format: int32
          example: 1559605283
        - type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
    AnyValue: {}
